package hello;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import static org.springframework.web.bind.annotation.RequestMethod.*;

//java spring will handle the conversion of objects back to JSON.

@Controller
@RestController //Shorthand for @RESPONSEBODY. Indicates that domain object will be returned.
public class BookingsController {

    // Which is auto-generated by Spring, we will use it to handle the data
    private final BookingsRepository bookingsRepository;

    public BookingsController(BookingsRepository xbookingsRepository) {
        this.bookingsRepository = xbookingsRepository;
    } //Used to be @Autowired but this is bad practice. Replace with constructor for interface.
    // This means to get the bean called userRepository

    @RequestMapping(path="/bookings", method=GET)
    public @ResponseBody Iterable<Booking> getAllBookings() {
        // This returns a JSON or XML with the users
        return bookingsRepository.findAll();
    }

    @RequestMapping(path="/bookings", method=POST)
    public @ResponseBody String addBooking(@RequestBody Booking bk) {
        for (Booking b : bookingsRepository.findAll()){
            if (bk.getRoom_name().equals(b.getRoom_name()))
                if(bk.getDay() == b.getDay())
                    if (bk.getTime().equals(b.getTime()))
                        return "Error, booking already exists";
        }
        this.bookingsRepository.save(bk);
        return "Success booking made";
    }
    @RequestMapping(path="/bookings", method=DELETE)
    public @ResponseBody String deleteBookingByID(@RequestParam Integer id) {
        try{
            Booking r = this.bookingsRepository.findById(id).orElse(null);
            if (r == null)
                return "No object with id " + id + " exists";
            this.bookingsRepository.delete(r);
            return "Object with id " + id + " deleted.";
        }
        catch(Exception e){
            return "Fail: " + e.getMessage();
        }
    }

    @RequestMapping(path="/timetableWeek/rooms/{name}/startDay/{dayS}/endDay/{dayE}", method=GET)
    public @ResponseBody List<Booking> getBookingsForRoomForWeek(@PathVariable String name, @PathVariable Integer dayS, @PathVariable Integer dayE) {
        List<Booking> resp = new ArrayList<>();
        for (Booking b : bookingsRepository.findAll()){
            if (b.getRoom_name().equals(name) && b.getDay() >= dayS && b.getDay() <= dayE)
                resp.add(b);
        }
        return resp;
    }
    @RequestMapping(path="/checkRoom/rooms/{name}/day/{day}/time/{time}", method=GET)
    public @ResponseBody List<Booking> getBookingsForRoomForDayAndTime(@PathVariable String name, @PathVariable Integer day, @PathVariable String time) {
        // This returns a JSON or XML with the users
        List<Booking> resp = new ArrayList<>();
        for (Booking b : bookingsRepository.findAll()){
            if (b.getRoom_name().equals(name) && b.getDay() == day && b.getTime().equals(time))
                resp.add(b);
        }
        return resp;
    }

}
