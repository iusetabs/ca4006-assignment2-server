package hello;

import java.util.concurrent.atomic.AtomicLong;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

//java spring will handle the conversion of objects back to JSON.

@RestController //Shorthand for @RESPONSEBODY. Indicates that domain object will be returned.
public class GreetingController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RoomsRepository roomsRepository;
    private static final String template = "Hello, %s!";
    private final AtomicLong counter = new AtomicLong();

    @RequestMapping("/greeting") //ensures that HTTP requests to /greeting are mapped to the greeting() method.
    //@RequestMapping(method=GET) to narrow this mapping - if we want to map it to a specific REST call
    public Greeting greeting(@RequestParam(value="name", defaultValue="World") String name) {
        //@RequestParam binds value of query string parameter to name. Default value.
        return new Greeting(counter.incrementAndGet(),
                            String.format(template, name));
    }
    @RequestMapping(path="/createRoom") // Map ONLY GET Requests
    public @ResponseBody
    String addNewRoom (@RequestParam String name
            , @RequestParam Integer capacity) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Rooms n = new Rooms();
        n.setName(name);
        n.setCapacity(capacity);
        roomsRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Rooms> getAllRooms() {
        // This returns a JSON or XML with the users
        return roomsRepository.findAll();
    }
}
